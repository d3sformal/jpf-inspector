<?xml version="1.0" ?>

<!--
  build.xml - generic JPF extension build script
              using Ant (http://jakarta.apache.org/ant)
  public targets:
    
    compile           compile JPF and its specific (modeled) environment libraries
    test              run all JPF tests
    jar               build JPF jar files
    dist              build binary distribution
    clean             remove the files that have been generated by the build process

-->

<project name="jpf-inspector" default="build" basedir=".">

  <!-- ========================== COMMON SECTION ========================== -->

  <!-- 
    local props have to come first, because Ant properties are immutable
    NOTE: this file is local - it is never in the repository!
  -->
  <property file="local.properties"/>

  <property file="jpf.properties"/>
  
  <!-- this is where we get the 'jpf.core' location from -->
  <!--suppress AntResolveInspection, AntMissingPropertiesFileInspection -->
  <property file="${user.home}/.jpf/site.properties"/>

  <!-- if there is none, default to a 'jpf-core' peer dir -->
  <property name="jpf-core" value = "../jpf-core"/>
  <!-- if there is none, default to a 'jpf-shell' peer dir -->
  <property name="jpf-shell" value = "../jpf-shell"/>
  <property name="jpf-symbc" value = "../jpf-symbc"/>

  <!-- get the jpf-core path properties -->
  <property file="${jpf-core}/jpf.properties"/>

  <property name="dir-console-grammar-source" location="src/main/gov/nasa/jpf/inspector/client/parser"/>
  <property name="dir-console-grammar-target" location="src/main/gov/nasa/jpf/inspector/client/parser/generated"/>
  
  <property name="dir-server-expression-grammar-source" location="src/main/gov/nasa/jpf/inspector/server/expression"/>
  <property name="dir-server-expression-grammar-target" location="src/main/gov/nasa/jpf/inspector/server/expression/generated"/>

  <!-- compiler settings -->
  <property name="src_level"     value="8"/>
  <property name="debug"         value="on"/>
  <property name="deprecation"   value="on"/>


  <!-- generic classpath settings -->
  <path id="lib.path">

    <!-- our own classes and libs come first -->
    <pathelement location="build/main"/>
    <pathelement location="build/symbc"/>
    <!-- we don't have these
    <pathelement location="build/peers"/>
    -->
    <fileset dir=".">
      <include name="lib/*.jar"/>
    </fileset>

    <!-- add in what we need from the core -->
    <pathelement path="${jpf-core.native_classpath}"/>

    <pathelement path="${jpf-shell}/build/main/"/>
    <pathelement path="${jpf-symbc}/build/main/"/>
  </path>

  <!-- Build classpath settings -->
  <path id="tools.path">

    <!-- our own classes and libs come first -->
    <pathelement location="build/main"/>
    <pathelement location="build/symbc"/>
    <!-- we don't have these
    <pathelement location="build/peers"/>
    -->
    <fileset dir=".">
       <include name="lib/*.jar"/>
    </fileset>

    <fileset dir=".">
      <include name="tools/*.jar"/>
    </fileset>

    <!-- add in what we need from the core -->
    <pathelement path="${jpf-core.native_classpath}"/>
    <pathelement path="${jpf-inspector.classpath}"/>
  </path>

  <!-- init: common initialization -->
  <target name="-init">
    <tstamp/>

    <mkdir dir="build"/>               <!-- the build root -->

    <!-- the things that have to be in the classpath of whatever runs Ant -->
    <available property="have_javac" classname="com.sun.tools.javac.Main"/>
    <fail unless="have_javac">no javac found</fail>


    <available file="src/main"        type="dir" property="have_main"/>
    <available file="src/symbc"       type="dir" property="have_symbc"/>
    <available file="src/annotations" type="dir" property="have_annotations"/>
    <available file="src/peers"       type="dir" property="have_peers"/>
    <available file="src/classes"     type="dir" property="have_classes"/>
    <available file="src/tests"       type="dir" property="have_tests"/>
    <available file="src/examples"    type="dir" property="have_examples"/>
    <available file="${jpf-symbc}"    type="dir" property="jpf_symbc_exists" />

    <condition property="have_jvm_code">
      <or>
        <isset property="have_main"/>
        <isset property="have_peers"/>
      </or>
    </condition>

    <condition property="have_jpf_code">
      <or>
        <isset property="have_classes"/>
        <isset property="have_annotations"/>
      </or>
    </condition>


    <!-- optionally set the required artifacts here !-->
    <fail unless="have_main">no src/main</fail>
    <fail unless="have_tests">no src/tests</fail>
    <fail unless="have_examples">no src/examples</fail>
    <!--
    JPF
    <fail unless="have_annotations">no src/annotations</fail>
    <fail unless="have_peers">no src/peers</fail>
    <fail unless="have_classes">no src/classes</fail>
    -->

  </target>


  <!-- ======================= COMPILE SECTION ============================= -->
    
  <!-- public compile -->
  <target name="compile" depends="-init,-compile-annotations,-compile-main,-compile-peers,-compile-classes,-compile-tests,-compile-examples"
          description="compile all JPF Inspector sources" >
  </target>

  <!-- GRAMMAR GENERATING PARTS -->
  <!-- Console grammar -->
  <fileset id="-generate-main-console-grammar-generated-files" dir="${dir-console-grammar-target}">
    <include name="ConsoleGrammar*.java"/>
    <include name="ConsoleGrammar*.tokens"/>
  </fileset>
  
  <target name="-generate-main-console-grammar-outdated">
    <!-- Removes generated grammar files if outdated !-->
    <dependset>
      <srcfilelist dir = "${dir-console-grammar-source}">
        <file name="ConsoleGrammar.g4"/>
      </srcfilelist>
      <targetfileset refid="-generate-main-console-grammar-generated-files"/>
    </dependset>
  </target>
  
  <target name="-generate-main-console-grammar-check" depends="-generate-main-console-grammar-outdated">
    <!-- Check if it's needed to regenerate grammars -->
    <condition property="-generate-main-console-grammar-generate">
      <not>
        <available file="${dir-console-grammar-target}/ConsoleGrammarLexer.java"/>
        <!-- if not found than parser not generated or was outdated and thus removed by -grammar.outdated target -->
      </not>
    </condition>
  </target>
  
  <target name="-generate-main-console-grammar" depends="-generate-main-console-grammar-check" if="-generate-main-console-grammar-generate">
    <!-- Running ATNLR generator !-->
    <java classname="org.antlr.v4.Tool"  fork="yes" failonerror="yes">
      <classpath refid="tools.path"/>
      <arg line="-o ${dir-console-grammar-target} ${dir-console-grammar-source}/ConsoleGrammar.g4"/>
    </java>
  </target>

  <!-- Expression grammar -->
  <fileset id="-generate-main-server-expression-grammar-generated-files" dir="${dir-server-expression-grammar-target}">
    <include name="ExpressionGrammar*.java"/>
    <include name="ExpressionGrammar*.tokens"/>
  </fileset>
  
  <target name="-generate-main-server-expression-grammar-outdated">
    <!-- Removes generated grammar files if outdated !-->
    <dependset>
      <srcfilelist dir = "${dir-server-expression-grammar-source}">
        <file name="ExpressionGrammar.g4"/>
      </srcfilelist>
      <targetfileset refid="-generate-main-server-expression-grammar-generated-files"/>
    </dependset>
  </target>
  
  <target name="-generate-main-server-expression-grammar-check" depends="-generate-main-server-expression-grammar-outdated">
    <!-- Check if it's needed to regenerate grammars !-->
    <condition property="--generate-main-server-expression-grammar-generate">
      <not>
        <available file="${dir-server-expression-grammar-target}/ExpressionGrammarLexer.java"/>
        <!-- if not found than parser not generated or was outdate and thus removed by -grammar.outdated target !-->
      </not>
    </condition>
  </target>
  
  <target name="-generate-main-server-expression-grammar" depends="-generate-main-server-expression-grammar-check" if="--generate-main-server-expression-grammar-generate">
    <!-- Running ATNRL generator !-->
    <java classname="org.antlr.v4.Tool"  fork="yes" failonerror="yes">
      <classpath refid="tools.path"/>
      <arg line="-o ${dir-server-expression-grammar-target} ${dir-server-expression-grammar-source}/ExpressionGrammar.g4"/>
    </java>
  </target>
  

  <target name="generate-grammars" depends="-generate-main-console-grammar, -generate-main-server-expression-grammar" description="generate grammar files">
  </target>
  
  <target name="-main-grammar-clean">
    <!-- Remove files generated by ANTRL from grammars !-->
    <delete>
        <fileset refid="-generate-main-console-grammar-generated-files"/>
        <fileset refid="-generate-main-server-expression-grammar-generated-files"/>
    </delete>
  </target>


  <target name="-compile-annotations" if="have_annotations">
    <mkdir dir="build/annotations"/>
    <javac srcdir="src/annotations" destdir="build/annotations"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}" classpath="" 
           encoding="UTF-8"
           includeantruntime="false"/>
  </target>

  <target name="-compile-main" if="have_main" depends="generate-grammars">
    <mkdir dir="build/main"/>
    <javac srcdir="src/main" destdir="build/main"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           encoding="UTF-8"
           classpathref="lib.path" includeantruntime="false">
    <compilerarg value="-Xlint:unchecked"/>
    </javac>

    <copy todir="build/main">
      <fileset dir="src/main" includes="**/*.png,**/*.gif" />
    </copy>
  </target>

  <target name="-compile-symbc">
    <mkdir dir="build/symbc"/>
    <javac srcdir="src/symbc" destdir="build/symbc"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           encoding="UTF-8"
           classpathref="lib.path" includeantruntime="false">
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>
  <target name="-compile-symbc-if-exists" if="jpf_symbc_exists">
    <antcall target="-compile-symbc"></antcall>
  </target>

  <target name="-compile-peers" if="have_peers" depends="-compile-main" >
    <mkdir dir="build/peers"/>
    <javac srcdir="src/peers" destdir="build/peers"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           encoding="UTF-8"
           classpathref="lib.path" includeantruntime="false"/>
  </target>

  <target name="-compile-classes" if="have_classes" depends="-compile-annotations,-compile-main" >
    <mkdir dir="build/classes"/>
    <javac srcdir="src/classes" destdir="build/classes"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           encoding="UTF-8"
           includeantruntime="false">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/annotations"/>
      </classpath>
    </javac>
  </target>

  <target name="-compile-tests" if="have_tests" depends="-compile-annotations,-compile-main">
    <mkdir dir="build/tests"/>
    <javac srcdir="src/tests" destdir="build/tests"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           encoding="UTF-8"
           includes="*,gov/nasa/jpf/inspector/tests/**" includeantruntime="false">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/annotations"/>
      </classpath>
    </javac>
  </target>

  <target name="-compile-examples" if="have_examples" depends="-compile-annotations,-compile-main">
    <mkdir dir="build/examples" />
    <javac srcdir="src/examples" destdir="build/examples"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           encoding="UTF-8"
           classpathref="lib.path" includeantruntime="false"/>
  </target>

  
  <!-- ======================= MISC SECTION ================================ -->
  
  <!-- build jars -->
  <target name="build-with-symbc" depends="compile, -compile-symbc, -jar-jvm, -jar-jpf, -jar-annotations"
          description="builds the Inspector including support for jpf-symbc (requires jpf-symbc)">
  </target>
  <target name="build" depends="compile, -compile-symbc-if-exists, -jar-jvm,-jar-jpf,-jar-annotations"
        description="generate the ${ant.project.name} jar files" >
  </target>

  <target name="-debug.check">
    <condition property="debug.check">
      <equals arg1="${debug}" arg2="on" casesensitive="false" trim="true"/>
    </condition>
  </target>

  <target name="-jar-jvm-with-src" depends="-debug.check" if="debug.check">
    <jar jarfile="build/${ant.project.name}.jar" >
      <fileset dir="build/main"/>
      <fileset dir="src/main"/>
      <!--
      <fileset dir="build/peers"/>
      <fileset dir="src/peers"/>
      -->
    </jar>
  </target>

  <target name="-jar-jvm-without-src" depends="-debug.check" unless="debug.check">
    <jar jarfile="build/${ant.project.name}.jar" >
      <fileset dir="build/main"/>
      <fileset dir="build/peers" erroronmissingdir="false"/>
    </jar>
  </target>

  <target name="-jar-jvm" if="have_jvm_code">
    <antcall target="-jar-jvm-with-src"/>
    <antcall target="-jar-jvm-without-src"/>
  </target>


  <target name="-jar-jpf-with-src" depends="-debug.check" if="debug.check">
    <jar jarfile="build/${ant.project.name}-classes.jar">
      <fileset dir="build/classes"/>
      <fileset dir="build/annotations"/>
      <fileset dir="src/classes" erroronmissingdir="false"/>
      <fileset dir="src/annotations" erroronmissingdir="false"/>
    </jar>
  </target>

  <target name="-jar-jpf-without-src" depends="-debug.check" unless="debug.check">
    <jar jarfile="build/${ant.project.name}-classes.jar">
      <fileset dir="build/classes"/>
      <fileset dir="build/annotations"/>
    </jar>
  </target>

  <target name="-jar-jpf" if="have_jpf_code">
    <antcall target="-jar-jpf-with-src"/>
    <antcall target="-jar-jpf-without-src"/>
  </target>

  <target name="-jar-annnotations-with-src" depends="-debug.check" if="debug.check">
    <jar jarfile="build/${ant.project.name}-annotations.jar">
      <fileset dir="build/annotations"/>
      <fileset dir="src/annotations" erroronmissingdir="false"/>
    </jar>
  </target>

  <target name="-jar-annnotations-without-src" depends="-debug.check" unless="debug.check">
    <jar jarfile="build/${ant.project.name}-annotations.jar">
      <fileset dir="build/annotations"/>
    </jar>
  </target>

  <target name="-jar-annotations" if="have_annotations">
    <antcall target="-jar-annnotations-with-src"/>
    <antcall target="-jar-annnotations-without-src"/>
  </target>

  <!-- public clean: cleanup from previous tasks/builds -->
  <target name="clean" depends="-main-grammar-clean" description="Removes compiled files and generated grammars">
    <delete dir="build" />
    <delete dir="build.eclipse" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no" />
      <fileset dir="." includes="**/*.bak" defaultexcludes="no" />
      <fileset dir="." includes="**/error.xml" />
    </delete>
  </target>
  


  <!-- ======================= TEST SECTION ================================ -->

  <target name="test" depends="compile"
          description="compile and run tests" if="have_tests">

    <property name="junit.usefile" value="false"/>

    <junit printsummary="on"
           showoutput="true"
           haltonfailure="yes"
           fork="yes"
           forkmode="perTest"
           maxmemory="1024m"
           dir=".."
          >
      <formatter type="plain" usefile="${junit.usefile}"/>

      <classpath>
        <path refid="lib.path"/>

        <pathelement location="build/tests"/>
        <pathelement location="build/classes"/>
        <pathelement location="build/examples"/>
        <pathelement location="build/annotations"/>

      </classpath>

      <batchtest todir="build/tests" fork="true">
        <fileset dir="build/tests">
          <exclude name="**/JPF_*.class"/>
          <exclude name="**/infrastructure/*.class"/>
          <include name="**/*Test.class"/>
        </fileset>
      </batchtest>

    </junit>
   
  </target>

  <!--- NEW TARGETS SECTION -->
  <target name="rebuild" depends="clean, build" description="Cleans the project and then fully rebuilds it.">
  </target>
  <target name="doxygen" description="Generates Doxygen javadocs at Petr's personal computer.">
    <exec executable="doxygen" dir="../documentation">
      <arg value="inspector-doxyfile"/>
    </exec>
  </target>
  <target name="simple-package" description="Creates an archive that contains a ready-to-run JPF distribution that includes the Inspector.">
    <delete>
      <fileset dir="../simple-distribution">
        <include name="**" />
      </fileset>
    </delete>
    <copy todir="../simple-distribution/jpf-core">
      <fileset dir="../jpf-core" includes="**" />
    </copy>
    <copy todir="../simple-distribution/jpf-shell">
      <fileset dir="../jpf-shell" includes="**" />
    </copy>
    <copy todir="../simple-distribution/jpf-inspector">
      <fileset dir="." includes="**" />
    </copy>
    <copy todir="../simple-distribution/HelloWorld">
      <fileset dir="../HelloWorld" includes="**" />
    </copy>
    <copy todir="../simple-distribution" file="../site.properties" />
    <copy todir="../simple-distribution" file="../HelloWorldReadme.txt" />
    <zip destfile="../jpf-inspector-stable.zip" basedir="../simple-distribution" />
  </target>
</project>
