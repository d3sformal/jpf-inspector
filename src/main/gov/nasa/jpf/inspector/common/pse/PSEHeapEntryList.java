//
// Copyright (C) 2010-2011 Pavel Jančík
// Copyright (C) 2016 Petr Hudeček
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

package gov.nasa.jpf.inspector.common.pse;

import gov.nasa.jpf.inspector.exceptions.JPFInspectorException;
import gov.nasa.jpf.inspector.server.expression.expressions.ExpressionStateHeapEntryList;
import gov.nasa.jpf.inspector.server.programstate.StateHeapEntryList;

import java.util.List;

/**
 * A list of objects on the heap, generated by the #heap[class-name] expression.
 * Linked classes:
 * - {@link StateHeapEntryList}
 * - {@link ExpressionStateHeapEntryList}
 */
public class PSEHeapEntryList extends ProgramStateEntry {

  private static final long serialVersionUID = -3669281817671708017L;

  private final List<PSEVariable> heapEntryList;

  public PSEHeapEntryList(List<PSEVariable> heapEntryList) {

    assert (heapEntryList != null);

    this.heapEntryList = heapEntryList;
  }

  /**
   * Gets the unmodifiable list with representation of filtered (by class name) heap entries.
   */
  public List<PSEVariable> getHeapList () {
    return heapEntryList;
  }

  @Override
  public <T> T visit (PSEVisitor<T> visitor) throws JPFInspectorException {
    return visitor.visitPSEHeapEntryList(this);
  }

}
