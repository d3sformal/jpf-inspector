### This is the project configuration file for the jpf-inspector extension.

jpf-inspector = ${config_path}

# Import jpf-shell. This is always necessary, even for command line execution.
@using jpf-shell

### Used shell panels
shell.panels+=,inspector.console,inspector.breakpoint_manager,inspector.source_code_view,inspector.program_state_explorer

### Extensibility

jpf-inspector.custom_hit_conditions = extensibility.OnLineHitCondition
# A list of classes, comma-separated, that should be loaded as custom hit conditions. They must implement the CustomHitCondition interface.
# These classes must be in the collected native classpath.

jpf-inspector.custom_commands = extensibility.CustomCmdTotalHitcount
# A list of classes, comma-separated, that should be loaded as custom commands. They must implement the CustomCommand interface.
# These classes must be in the collected native classpath.

# The following are aliases for existing commands or their variants:
# GDB-style aliases:
jpf-inspector.alias.c = continue
jpf-inspector.alias.s = step_instruction

# For testing purposes only (remove later on):
jpf-inspector.alias.hi = hello
jpf-inspector.alias.invalid = dfgsdfg dfgsdfgh dfhsh

# "commence" brings the program into the position at which it can stop and stops there
jpf-inspector.alias.commence = create breakpoint hit_count <= 1 instruction_type=any && run && wait
jpf-inspector.alias.cmc = commence
jpf-inspector.alias.brk = create breakpoint hit_count <= 1 position=*:{0}
jpf-inspector.alias.heap = print #heap[*]
jpf-inspector.alias.strings = print #heap[java.lang.String]

# Toolbar Quick Actions:
jpf-inspector.toolbar.commence = create breakpoint hit_count <= 1 instruction_type=any && run && wait

# Attribute Adaptors
jpf-inspector.attribute_adaptors=\
          gov.nasa.jpf.inspector.server.attributes.adaptors.CoreAttributeAccessDetector,\
          gov.nasa.jpf.inspector.server.attributes.adaptors.GenericCopyConverter,\
          gov.nasa.jpf.inspector.server.attributes.adaptors.NullConverter

# Uncomment this line if you have jpf-symbc installed as well:
# @include symbolic-execution-support.jpf

### Inspector configuration

log.level = WARNING
# log.level = WARNING
# Default log.level is WARNING. The JPF Inspector does not support advanced logging configuration, such as remote console.

jpf-inspector.theme = white_on_black
#jpf-inspector.theme = black_on_white
# If no theme is set, black_on_white is assumed.

jpf-inspector.ignore_breakpoints_in_ignored_classes = true
jpf-inspector.ignored_classes=java.*,javax.*,sun.*
# If true, then breakpoints won't trigger when the topmost stack frame is a method under the "java" or "javax" namespace.
# It is possible to change the list of ignored classes/namespaces. You may use the '*' (asterisk) wildcard.

jpf-inspector.safe_mode = true
# If true, the user is prevented from using commands that might crash the Inspector. For example, it will only permit
# the "break" command when JPF is running.

jpf-inspector.batch_mode = false
# If batch mode is activated, the "echo-input" subproperty takes effect.
# By default, batch mode removes prompts from being displayed.
# Batch mode only works in command line mode - it is not possible to use batch mode using the Swing shell.

jpf-inspector.batch_mode.echo_input = true
# If batch mode is active and echo-input is true, then all input commands will be displayed on screen along with prompts.

jpf-inspector.wait_after_run = false
# If true, then the commands that cause JPF execution to be resumed ("run" and stepping commands) do their work
# and then block the command execution thread until JPF becomes stopped again. This is useful in executing batch
# scripts because that's what you want anyway. If you want this functionality only selectively, you may use
# commands such as "run && wait" or "step_over && wait" instead of setting this to "true".

jpf-inspector.request_focus_on_verify = true
# If true, then, after the "run" command is executed, the Inspector console should remain visible

jpf-inspector.custom_breakpoint_exception_breaks = true
# If true, then an exception thrown within a custom hit condition will cause that hit condition to trigger.
# If false, the exception is swallowed.

jpf-inspector.prevent_beeps = true
# If true, then the Inspector will override the look-and-feel of the GUI in order to prevent beeps
# from occurring when executing commands or typing Backspace.

#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
##### Internal configuration follows. You probably won't need to change any of this in this file. Instead change  #####
##### these in your application file.                                                                             #####
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
### Search class
# Because of how jpf-core loads property files, if this folder or a subfolder is in the initial classpath,
# then this property will be overwritten by jpf-core's default search class. This is why, when running classes
# from the IDE, one must specify search.class explicitly in the application properties.
search.class=gov.nasa.jpf.inspector.server.jpf.DFSearchInspector

### Classpaths

jpf-inspector.classpath=\
  ${jpf-inspector}/build/examples;\
  ${jpf-inspector}/build/tests

jpf-inspector.native_classpath=\
  ${jpf-inspector}/build/examples

# The following two sections appear to be duplicates:
jpf-core.native_classpath+=;\
  ${jpf-inspector}/build/main;\
  ${jpf-inspector}/build.eclipse;\
  ${jpf-inspector}/lib/antlr-4.5.3-complete.jar;\
  ${jpf-inspector}/lib/jansi-1.12.jar;\
  ${jpf-inspector}/lib/jline-0.9.94-Inspector.jar
#  ${jpf-inspector}/lib/jline2.jar;

jpf-shell.native_classpath+=;\
  ${jpf-inspector}/build/main;\
  ${jpf-inspector}/build.eclipse;\
  ${jpf-inspector}/lib/antlr-4.5.3-complete.jar;\
  ${jpf-inspector}/lib/jansi-1.12.jar;\
  ${jpf-inspector}/lib/jline-0.9.94-Inspector.jar;\
  ${jpf-inspector}/lib/rsyntaxtextarea-2.6.0-SNAPSHOT.jar;\
  ${jpf-inspector}/build/symbc
#${jpf-inspector}/lib/jline2.jar;

jpf-inspector.sourcepath=\
  ${jpf-inspector}/src/examples;\
  ${jpf-inspector}/src/tests

jpf-inspector.test_classpath=\
  ${jpf-inspector}/build/tests;\
  ${jpf-inspector}/build/main;\
  ${jpf-core}/build/main;\
  ${jpf-core}/build/jpf-classes.jar

### Shell Panel Names
# When using the graphical shell, this is how JPF Inspector is launched.
shell.panels.inspector.console=gov.nasa.jpf.inspector.frontends.swing.InspectorPrimaryConsolePanel
shell.panels.inspector.breakpoint_manager=gov.nasa.jpf.inspector.frontends.swing.breakpoints.BreakpointManagerPanel
shell.panels.inspector.program_state_explorer=gov.nasa.jpf.inspector.frontends.swing.explorer.ProgramStateExplorerPanel
shell.panels.inspector.source_code_view=gov.nasa.jpf.inspector.frontends.swing.source.SourceCodeViewPanel
shell.available_panels+=,inspector.console,inspector.breakpoint_manager,inspector.program_state_explorer,inspector.source_code_view


